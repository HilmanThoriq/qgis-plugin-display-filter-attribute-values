# -*- coding: utf-8 -*-
"""
/***************************************************************************
 DisplayFilterAttributeValueDialog
                                 A QGIS plugin
 -
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-06-07
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Hilman Thoriq | SIG UGM 24
        email                : hilmanthoriq@mail.ugm.ac.id
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtWidgets import QDialog, QLabel
from qgis.PyQt.uic import loadUi
from qgis.core import QgsVectorLayer, QgsFeatureRequest, QgsProject
from qgis.gui import QgsMapTool

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'DisplayFilterAttributeValue_dialog_base.ui'))


class DisplayFilterAttributeValueDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, iface, parent=None):
        """Constructor."""
        super(DisplayFilterAttributeValueDialog, self).__init__(parent)
        self.iface = iface
        self.canvas = iface.mapCanvas()
        self.setupUi(self)

        # Populate layer combobox
        self.populate_layer_combobox()

        # Connect signals
        self.cmbLayers.currentIndexChanged.connect(self.populate_field_combobox)
        self.cmbFields.currentIndexChanged.connect(self.populateFieldValues)
        self.cmbFieldValues.currentIndexChanged.connect(self.enableSelectButton)
        self.btnSelectData.clicked.connect(self.selectData)

    def populate_layer_combobox(self):
        """Populate the layer combobox with available vector layers."""
        self.cmbLayers.clear()
        layers = [layer for layer in QgsProject.instance().mapLayers().values() if isinstance(layer, QgsVectorLayer)]
        for layer in layers:
            self.cmbLayers.addItem(layer.name(), layer)

    def populate_field_combobox(self):
        """Populate the field combobox based on the selected layer."""
        self.cmbFields.clear()
        layer = self.cmbLayers.currentData()
        if layer:
            self.cmbFields.addItems([field.name() for field in layer.fields()])

    def populateFieldValues(self):
        self.cmbFieldValues.clear()
        layer = self.cmbLayers.currentData()
        field_name = self.cmbFields.currentText()
        if not layer or not field_name:
            return

        field_idx = layer.fields().indexFromName(field_name)
        if field_idx == -1:
            return

        field_values = set(feat[field_idx] for feat in layer.getFeatures())
        self.cmbFieldValues.addItems(sorted(str(value) for value in field_values))

    def enableSelectButton(self):
        self.btnSelectData.setEnabled(self.cmbFieldValues.currentIndex() != -1)

    def selectData(self):
        layer = self.cmbLayers.currentData()
        selected_value = self.cmbFieldValues.currentText()
        field_name = self.cmbFields.currentText()
        expression = f'"{field_name}" = \'{selected_value}\''
        layer.selectByExpression(expression)

        self.canvas.zoomToSelected(layer)
        self.canvas.refresh()

        root = QgsProject.instance().layerTreeRoot()
        node = root.findLayer(layer.id())
        if node:
            node.setCustomProperty("showFeatureCount", True)
